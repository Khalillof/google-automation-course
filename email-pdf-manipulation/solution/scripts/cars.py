#!/usr/bin/env python3

import json
import locale
import sys
import operator
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  most_sales ={}
  popular_year={}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    car_data_key=format_car(item['car'])
    most_sales[car_data_key]=item['total_sales']

    # TODO: also handle most popular car_year
    year_id=str(item['car']['car_year'])

    if year_id in popular_year:
       popular_year[year_id]+=item['total_sales']
    else:
        popular_year[year_id]=item['total_sales']
  
  # get the car with most sales
  max_sales_id=max(most_sales.items(), key=operator.itemgetter(1))[0]

  # get the most popular car id
  popular_year_id=max(popular_year.items(), key=operator.itemgetter(1))[0]

  summary = [
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: ({})".format(max_sales_id,most_sales[max_sales_id]), 
    "The most popular year was {} with ({}) sales.".format(popular_year_id,popular_year[popular_year_id] )
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

# compine list of strings to string rows
def compin_strs(str_list, new_line):
    compined_string = ''
    for line in str_list:
        compined_string += line + new_line
    return compined_string

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  summary_linesR=compin_strs(summary, '<br/>')
  summary_linesE=compin_strs(summary, '\n')
  tabe_data=cars_dict_to_table(data)
  #print(summary)
  # TODO: turn this into a PDF report
  reports.generate("/tmp/cars.pdf","Sales summary for last month",summary_linesR , tabe_data)

  # TODO: send the PDF report as an email attachment
  message=emails.generate("automation@example.com", "<USER>@example.com", "Sales summary for last month", summary_linesE, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
